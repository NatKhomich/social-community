{"version":3,"file":"static/js/4.1fdaa771.chunk.js","mappings":"mTACA,EAA6B,0BAA7B,EAAmE,yB,SCgInE,GAAeA,EAAAA,EAAAA,KAhBO,SAACC,GACnB,MAAO,CACHC,YAAYC,EAAAA,EAAAA,IAAqBF,GACjCG,YAAYC,EAAAA,EAAAA,IAAqBJ,MAaD,CACpCK,MAAOC,EAAAA,IADX,EA3Gc,SAACC,GAEX,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAYhC,OAVKD,EAAOL,MADG,4CAGIO,KAAKF,EAAOL,SAC3BM,EAAON,MAAQ,yBAFfM,EAAON,MAAQ,WAIdK,EAAOJ,SAEDI,EAAOJ,SAASO,OAAS,IAChCF,EAAOL,SAAW,oBAFlBK,EAAOL,SAAW,WAIfK,GAEXG,SAAU,SAAAJ,GACNT,EAAMF,MAAMW,EAAOL,MAAOK,EAAOJ,SAAUI,EAAOH,WAAYG,EAAOF,YAI7E,OAAIP,EAAMN,YACC,SAAC,KAAD,CAAUoB,GAAI,cAGlB,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,eAAgB,SAAUC,UAAWC,EAArD,UACH,SAACJ,EAAA,GAAD,CAAMK,MAAI,EAACH,eAAgB,SAA3B,UAEI,iBAAMJ,SAAUZ,EAAOoB,aAAvB,UACI,SAACC,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,YACI,SAACC,EAAA,GAAD,QAAWC,MAAM,QACNC,OAAO,SACPC,KAAK,SACD1B,EAAO2B,cAAc,WAEnC3B,EAAO4B,QAAQzB,OAASH,EAAOS,OAAON,OACnC,iBAAKe,MAAO,CAACW,MAAO,OAApB,cAA8B7B,EAAOS,OAAON,MAA5C,OAA4D,MAChE,SAACoB,EAAA,GAAD,QAAWO,KAAK,WACLN,MAAM,WACNC,OAAO,SACPC,KAAK,SACD1B,EAAO2B,cAAc,cAEnC3B,EAAO4B,QAAQxB,UAAYJ,EAAOS,OAAOL,UACtC,iBAAKc,MAAO,CAACW,MAAO,OAApB,cAA8B7B,EAAOS,OAAOL,SAA5C,OAA+D,MACnE,SAAC2B,EAAA,EAAD,CAAkBP,MAAO,cACPQ,SAAS,SAACC,EAAA,EAAD,IACTC,KAAK,aACLC,SAAUnC,EAAOoC,aACjBC,MAAOrC,EAAOQ,OAAOH,aAEtCN,EAAMJ,aAAc,gBAAKsB,UAAWC,EAAkBoB,IAAKvC,EAAMJ,WAAY4C,IAAK,YAClFxC,EAAMJ,aAAc,0BACjB,SAAC4B,EAAA,GAAD,QAAWC,MAAM,UACNC,OAAO,SACPC,KAAK,QACLR,MAAO,CAACsB,MAAO,SACXxC,EAAO2B,cAAc,gBAIxC,SAACc,EAAA,EAAD,CAAQX,KAAM,SAAUY,QAAS,WAAYb,MAAO,YAApD,oBAIA,UAACc,EAAA,EAAD,YACI,qDACI,cAAGC,KAAM,wCACNC,OAAQ,SADX,uBAIJ,oEACA,sDACA","sources":["webpack://samurai-way/./src/features/Auth/Login.module.css?c51f","features/Auth/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"captchaImg\":\"Login_captchaImg__3r+Vb\",\"loginForm\":\"Login_loginForm__HEoRH\"};","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {connect} from 'react-redux';\r\nimport {loginTC} from './authReducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {selectAuthCaptchaUrl, selectAuthIsLoggedIn} from './authSelectors';\r\nimport style from './Login.module.css'\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            const regExp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!regExp.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.login(values.email, values.password, values.rememberMe, values.captcha)\r\n        },\r\n    })\r\n\r\n    if (props.isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'} className={style.loginForm}>\r\n        <Grid item justifyContent={'center'}>\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   size='small'\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}> {formik.errors.email} </div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   size='small'\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}> {formik.errors.password} </div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>}\r\n                                          name='rememberMe'\r\n                                          onChange={formik.handleChange}\r\n                                          value={formik.values.rememberMe}\r\n                        />\r\n                        {props.captchaUrl && <img className={style.captchaImg} src={props.captchaUrl} alt={'captcha'}/>}\r\n                        {props.captchaUrl && <div>\r\n                            <TextField label=\"captcha\"\r\n                                       margin=\"normal\"\r\n                                       size='small'\r\n                                       style={{width: '100%'}}\r\n                                       {...formik.getFieldProps('captcha')} />\r\n                        </div>\r\n                        }\r\n\r\n                        <Button type={'submit'} variant={'outlined'} color={'secondary'}>\r\n                            Login\r\n                        </Button>\r\n\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isLoggedIn: selectAuthIsLoggedIn(state),\r\n        captchaUrl: selectAuthCaptchaUrl(state)\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isLoggedIn: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n}\r\ntype LoginType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nexport default connect(mapStateToProps, {\r\n    login: loginTC\r\n})(Login)"],"names":["connect","state","isLoggedIn","selectAuthIsLoggedIn","captchaUrl","selectAuthCaptchaUrl","login","loginTC","props","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","length","onSubmit","to","Grid","container","justifyContent","className","style","item","handleSubmit","FormControl","FormGroup","TextField","label","margin","size","getFieldProps","touched","color","type","FormControlLabel","control","Checkbox","name","onChange","handleChange","value","src","alt","width","Button","variant","FormLabel","href","target"],"sourceRoot":""}