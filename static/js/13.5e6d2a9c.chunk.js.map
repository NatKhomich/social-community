{"version":3,"file":"static/js/13.5e6d2a9c.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/common/components/Button/Button.module.css?e62a","common/components/Button/Button.tsx","webpack://samurai-way/./src/common/components/TextForm/TextForm.module.css?1b8d","common/components/TextForm/TextForm.tsx","common/hoc/withAuthRedirect.tsx","webpack://samurai-way/./src/features/Messenger/Messenger.module.css?063e","webpack://samurai-way/./src/features/Messenger/DialogItem/DialogItem.module.css?b0d1","features/Messenger/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/features/Messenger/MessageItem/Message.module.css?6def","features/Messenger/MessageItem/MessageItem.tsx","features/Messenger/Messenger.tsx","features/Messenger/messengerSelectors.ts","features/Messenger/MessengerContainer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__L01hs\",\"primary\":\"Button_primary__8XUR3\",\"secondary\":\"Button_secondary__VZBKd\"};","import React, {ComponentPropsWithoutRef, ElementType} from 'react';\r\nimport styles from './Button.module.css'\r\n\r\ntype Props<T extends ElementType = 'button'> = {\r\n    as?: T\r\n    className?: string\r\n    variant?: 'primary' | 'secondary'\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const Button = <T extends ElementType = 'button'>(props: Props<T>) => {\r\n    const { as: Component = 'button', className, variant = 'primary', ...rest } = props\r\n\r\n    const style = `${styles.button} ${styles[variant]}`\r\n\r\n    return <Component className={style} {...rest} />\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TextForm_form__FSNI1\",\"textarea\":\"TextForm_textarea__weHbY\",\"buttonBlock\":\"TextForm_buttonBlock__GjfIg\"};","import {useFormik} from 'formik';\r\nimport React from 'react';\r\nimport styles from './TextForm.module.css'\r\nimport {Button} from \"../Button/Button\";\r\n\r\nexport const TextForm = (props: TextFormType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: ''\r\n        },\r\n        onSubmit: values => {\r\n            props.callback(values)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return <form className={styles.form} onSubmit={formik.handleSubmit}>\r\n                <textarea className={styles.textarea}\r\n                          {...formik.getFieldProps('text')}\r\n                />\r\n\r\n        <div className={styles.buttonBlock}>\r\n            <Button>{props.name}</Button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\n//types\r\nexport type TextFormType = {\r\n    callback: (text: DataTextFormType) => void\r\n    name: string\r\n}\r\n\r\nexport type DataTextFormType = {\r\n    text: string\r\n}","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\n\r\ntype MapStateToPropsType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isLoggedIn: state.auth.isLoggedIn\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isLoggedIn, ...restProps} = props\r\n        if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Messenger_root__u9dLg\",\"messages\":\"Messenger_messages__9LhiN\",\"messageField\":\"Messenger_messageField__8RH9o\",\"dialogItemElement\":\"Messenger_dialogItemElement__W5wgz\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DialogItem_root__bdHHi\",\"title\":\"DialogItem_title__5NuHL\",\"item\":\"DialogItem_item__iJzww\",\"itemImage\":\"DialogItem_itemImage__+++ia\",\"itemAvatar\":\"DialogItem_itemAvatar__np6XU\",\"userAndMessage\":\"DialogItem_userAndMessage__Gd-kh\",\"userName\":\"DialogItem_userName__q+eR6\",\"userMessage\":\"DialogItem_userMessage__zi7zT\"};","import {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport styles from './DialogItem.module.css';\r\nimport {DialogType} from \"../messengerReducer\";\r\n\r\n\r\n\r\nexport const DialogItem = (props: DialogType) => {\r\n    const {id, name, avatar} = props\r\n\r\n    let path = `/dialogs/${id}`\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <NavLink key={id} to={path}>\r\n                <li className={styles.item}>\r\n                    <div className={styles.itemImage}>\r\n                        <img className={styles.itemAvatar} src={avatar} alt=\"contact-avatar\"/>\r\n                    </div>\r\n                    <div className={styles.userAndMessage}>\r\n                        <div className={styles.userName}>\r\n                            {`${name}`}\r\n                        </div>\r\n                        <div className={styles.userMessage}>\r\n                            'Lorem Ipsum is simply dummy text of the printing and typesetting industry'\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Message_root__4o4RH\",\"message\":\"Message_message__uupAz\"};","import React from 'react';\r\nimport styles from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\n\r\nexport const MessageItem = (props: PropsType) => {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};","import styles from './Messenger.module.css';\r\nimport React from 'react';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {MessengerContainerType} from './MessengerContainer';\r\nimport {MessageItem} from './MessageItem/MessageItem';\r\nimport {DataTextFormType, TextForm} from '../../common/components/TextForm/TextForm';\r\n\r\n\r\nexport const Messenger = (props: MessengerContainerType) => {\r\n    const {dialogs, messages, sendMessage} = props\r\n\r\n    const messageElement = messages.map(el => <MessageItem key={el.id} message={el.message}/>)\r\n    const dialogItemElement = dialogs.map(el => <DialogItem key={el.id} name={el.name} id={el.id} avatar={el.avatar}/>)\r\n\r\n    const sendMassageHandler = (newMessage: DataTextFormType) => {\r\n        if (newMessage.text !== '') {\r\n            sendMessage(newMessage.text)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className={styles.root}>\r\n                <div className={styles.dialogItemElement}> {dialogItemElement} </div>\r\n\r\n                <div className={styles.messages}>{messageElement}</div>\r\n            </div>\r\n            <div className={styles.messageField}>\r\n                <TextForm callback={sendMassageHandler} name={'Send'}/>\r\n            </div>\r\n        </section>\r\n    );\r\n};","import {AppRootStateType} from '../../app/store';\r\n\r\nexport const selectMessengerDialogs = (state: AppRootStateType) => state.dialogs.dialogs\r\nexport const selectMessengerMessages = (state: AppRootStateType) => state.dialogs.messages","import React from 'react';\r\nimport {DialogType, MessageType, sendMessageAC} from './messengerReducer';\r\nimport {Messenger} from './Messenger';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {withAuthRedirect} from '../../common/hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {selectMessengerDialogs, selectMessengerMessages} from './messengerSelectors';\r\n\r\n\r\nconst MessengerContainer = (props: MessengerContainerType) => {\r\n    return (\r\n        <Messenger dialogs={props.dialogs} messages={props.messages} sendMessage={props.sendMessage} />\r\n    )\r\n}\r\n\r\nexport type MessengerContainerType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: selectMessengerDialogs(state),\r\n        messages: selectMessengerMessages(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            sendMessage: sendMessageAC,\r\n        }),\r\n    withAuthRedirect\r\n)(MessengerContainer)\r\n\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["Button","props","as","Component","className","variant","rest","style","styles","TextForm","formik","useFormik","initialValues","text","onSubmit","values","callback","resetForm","handleSubmit","getFieldProps","name","mapStateToProps","state","isLoggedIn","auth","withAuthRedirect","connect","restProps","to","DialogItem","id","avatar","path","src","alt","MessageItem","message","Messenger","dialogs","messages","sendMessage","messageElement","map","el","dialogItemElement","newMessage","selectMessengerDialogs","selectMessengerMessages","compose","sendMessageAC","_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}